name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - 1.81.0  # MSRV
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check code formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run unit tests
      run: cargo test --lib --verbose
    
    - name: Run integration tests (mock)
      run: cargo test --test integration_tests --verbose
    
    - name: Run migration tests
      run: cargo test --features schema-migration --test migration_tests --verbose
    
    - name: Run doc tests
      run: cargo test --doc --verbose
    
    - name: Check examples compile
      run: |
        cargo check --example basic_usage
        cargo check --example migration_example
        cargo check --example migration_example --features schema-migration
    
    - name: Test with all features
      run: cargo test --all-features --verbose

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features
      env:
        RUSTDOCFLAGS: -Dwarnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Security audit
      run: cargo audit

  docker-integration:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
          - 6334:6334
        options: >-
          --health-cmd "timeout 5s curl -s http://localhost:6333/ > /dev/null || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docker-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Wait for Qdrant to be ready
      run: |
        echo "Waiting for Qdrant to become available..."
        timeout 180s bash -c 'until curl -s http://localhost:6333/ > /dev/null; do echo "Waiting for Qdrant..."; sleep 3; done'
        echo "Qdrant is responding!"
        echo "Testing connection:"
        curl -s http://localhost:6333/ | head -10 || echo "Basic endpoint test failed"
        curl -s http://localhost:6333/health || echo "Health endpoint not available, continuing..."
    
    - name: Run Docker integration tests
      run: cargo test --test docker_integration_tests --features docker-testing -- --test-threads=1
      env:
        TYL_QDRANT_URL: http://localhost:6334

  migration-validation:
    name: Migration & Pact Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-migration-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run migration tests with Pact validation
      run: cargo test --features schema-migration --test migration_tests --verbose
    
    - name: Run migration example
      run: cargo run --example migration_example --features schema-migration

  check-features:
    name: Feature Combinations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - "--no-default-features"
          - "--features mock"
          - "--features docker-testing"
          - "--features schema-migration"
          - "--all-features"
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-features-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check feature combination
      run: cargo check ${{ matrix.features }}
    
    - name: Test feature combination
      run: cargo test ${{ matrix.features }} || true  # Some combinations might not have tests

  # Final check that combines all results
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, docs, security, docker-integration, migration-validation, check-features]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.test.result }}" == "success" && \
              "${{ needs.docs.result }}" == "success" && \
              "${{ needs.security.result }}" == "success" && \
              "${{ needs.docker-integration.result }}" == "success" && \
              "${{ needs.migration-validation.result }}" == "success" && \
              "${{ needs.check-features.result }}" == "success" ]]; then
          echo "✅ All CI jobs passed!"
          exit 0
        else
          echo "❌ Some CI jobs failed:"
          echo "Test: ${{ needs.test.result }}"
          echo "Docs: ${{ needs.docs.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docker Integration: ${{ needs.docker-integration.result }}"
          echo "Migration Validation: ${{ needs.migration-validation.result }}"
          echo "Feature Combinations: ${{ needs.check-features.result }}"
          exit 1
        fi