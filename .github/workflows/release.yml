name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Validate version in Cargo.toml
      run: |
        CARGO_VERSION=$(grep '^version =' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Cargo.toml version: $CARGO_VERSION"
        echo "Git tag version: $TAG_VERSION"
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "‚ùå Version mismatch! Cargo.toml version ($CARGO_VERSION) doesn't match tag ($TAG_VERSION)"
          exit 1
        else
          echo "‚úÖ Version validation passed"
        fi
    
    - name: Run full test suite
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-targets --all-features -- -D warnings
        cargo test --all-features --verbose
        cargo test --features schema-migration --test migration_tests --verbose
        cargo doc --no-deps --all-features
    
    - name: Test migration example
      run: cargo run --example migration_example --features schema-migration
    
    - name: Build release
      run: cargo build --release --all-features
    
    - name: Package for validation
      run: cargo package --all-features

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f "CHANGELOG.md" ]; then
          # Extract changelog for this version
          awk -v version="${{ steps.get_version.outputs.VERSION }}" '
            /^##/ && match($0, version) { found=1; next }
            /^##/ && found { exit }
            found { print }
          ' CHANGELOG.md > release_notes.md
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Automated release for ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: TYL Qdrant Adapter ${{ steps.get_version.outputs.VERSION }}
        body: |
          # TYL Qdrant Adapter ${{ steps.get_version.outputs.VERSION }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## üöÄ Installation
          
          Add to your `Cargo.toml`:
          
          ```toml
          [dependencies]
          tyl-qdrant-adapter = { git = "https://github.com/the-yaml-life/tyl-qdrant-adapter.git", tag = "${{ steps.get_version.outputs.VERSION }}" }
          ```
          
          ## ‚ú® Features
          
          - üîç **Complete Qdrant Integration** - Full vector database operations
          - üîÑ **Schema Migrations** - With Pact.io validation for microservices
          - üéØ **Advanced Filtering** - Sophisticated query capabilities
          - üß™ **Mock Adapter** - For testing without dependencies
          - üìä **TYL Framework** - Full integration with TYL error handling, config, logging
          - üè• **Health Monitoring** - Built-in health checks and observability
          
          ## üéØ Quick Start
          
          ```rust
          use tyl_qdrant_adapter::{QdrantAdapter, QdrantConfig, VectorDatabase};
          
          let config = QdrantConfig::default();
          let adapter = QdrantAdapter::connect(config).await?;
          ```
          
          ## üìö Documentation
          
          - [README](https://github.com/the-yaml-life/tyl-qdrant-adapter/blob/main/README.md)
          - [Examples](https://github.com/the-yaml-life/tyl-qdrant-adapter/tree/main/examples)
          - [API Docs](https://docs.rs/tyl-qdrant-adapter)
          
          ## üîÑ Schema Migrations
          
          Enable with `features = ["schema-migration"]` for production-ready schema management.
          
          ---
          
          **Full Changelog**: [CHANGELOG.md](https://github.com/the-yaml-life/tyl-qdrant-adapter/blob/main/CHANGELOG.md)
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'rc') }}

  test-release-integration:
    name: Test Release Integration
    runs-on: ubuntu-latest
    needs: create-release
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
          - 6334:6334
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-integration-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Wait for Qdrant to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:6333/health; do sleep 2; done'
    
    - name: Test release with real Qdrant
      run: cargo test --test docker_integration_tests --features docker-testing -- --test-threads=1
      env:
        TYL_QDRANT_URL: http://localhost:6334

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features --document-private-items

  notify-success:
    name: Release Success
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, test-release-integration, docs]
    if: success()
    steps:
    - name: Success notification
      run: |
        echo "üéâ Release ${{ github.ref_name }} completed successfully!"
        echo "‚úÖ All validations passed"
        echo "‚úÖ Release created with changelog"
        echo "‚úÖ Integration tests passed"
        echo "‚úÖ Documentation deployed"
        echo "üì¶ Ready for production use"

  notify-failure:
    name: Release Failed
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, test-release-integration, docs]
    if: failure()
    steps:
    - name: Failure notification
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed!"
        echo "Please check the logs and fix issues before retrying."
        echo "Common issues:"
        echo "- Version mismatch between Cargo.toml and git tag"
        echo "- Test failures"
        echo "- Integration test failures"
        exit 1